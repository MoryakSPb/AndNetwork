// <auto-generated />
using System;
using AndNetwork.Server;
using AndNetwork.Server.Discord.Enums;
using AndNetwork.Shared.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AndNetwork.Server.Migrations
{
    [DbContext(typeof(ClanContext))]
    [Migration("20210304002154_AndNetwork")]
    partial class AndNetwork
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresEnum(null, "clan_award_type_enum", new[] { "none", "bronze", "silver", "gold", "hero" })
                .HasPostgresEnum(null, "clan_department_enum", new[] { "reserve", "beginners_pool", "none", "infrastructure", "research", "military", "agitation" })
                .HasPostgresEnum(null, "clan_druzhina_position_enum", new[] { "none", "troop", "lieutenant", "captain" })
                .HasPostgresEnum(null, "clan_elections_stage_enum", new[] { "none", "registration", "voting", "announcement", "ended" })
                .HasPostgresEnum(null, "clan_member_rank_enum", new[] { "outcast", "enemy", "guest", "diplomat", "ally", "candidate", "none", "neophyte", "trainee", "assistant", "junior_employee", "employee", "senior_employee", "specialist", "defender", "lieutenant", "captain", "advisor", "first_advisor" })
                .HasPostgresEnum(null, "discord_channel_type_enum", new[] { "text", "voice" })
                .HasPostgresEnum(null, "discord_permissions_flags", new[] { "none", "view", "read", "write", "priority", "moderator", "all" })
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AndNetwork.Server.Discord.Channels.DiscordChannelCategory", b =>
                {
                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<decimal>("DiscordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Position");

                    b.HasIndex("Name");

                    b.ToTable("ChannelCategories");
                });

            modelBuilder.Entity("AndNetwork.Server.Discord.Channels.DiscordChannelMetadata", b =>
                {
                    b.Property<decimal>("DiscordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DiscordPermissionsFlags>("AdvisorPermissions")
                        .HasColumnType("discord_permissions_flags");

                    b.Property<int?>("CategoryPosition")
                        .HasColumnType("integer");

                    b.Property<int>("ChannelPosition")
                        .HasColumnType("integer");

                    b.Property<int?>("DruzhinaId")
                        .HasColumnType("integer");

                    b.Property<DiscordPermissionsFlags>("EveryonePermissions")
                        .HasColumnType("discord_permissions_flags");

                    b.Property<DiscordPermissionsFlags>("MemberPermissions")
                        .HasColumnType("discord_permissions_flags");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("integer");

                    b.Property<DiscordChannelTypeEnum>("Type")
                        .HasColumnType("discord_channel_type_enum");

                    b.HasKey("DiscordId");

                    b.HasIndex("CategoryPosition");

                    b.HasIndex("DruzhinaId");

                    b.HasIndex("Name");

                    b.HasIndex("ProgramId");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("AndNetwork.Server.Discord.Channels.DiscordDepartmentPermissions", b =>
                {
                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ClanDepartmentEnum>("Department")
                        .HasColumnType("clan_department_enum");

                    b.Property<DiscordPermissionsFlags>("Permissions")
                        .HasColumnType("discord_permissions_flags");

                    b.HasKey("ChannelId", "Department");

                    b.ToTable("DiscordDepartmentPermissions");
                });

            modelBuilder.Entity("AndNetwork.Shared.ClanAward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<ClanAwardTypeEnum>("Type")
                        .HasColumnType("clan_award_type_enum");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("ClanAward");
                });

            modelBuilder.Entity("AndNetwork.Shared.ClanDruzhina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("date");

                    b.Property<ClanDepartmentEnum>("Department")
                        .HasColumnType("clan_department_enum");

                    b.Property<DateTime?>("DisbandDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Druzhinas");
                });

            modelBuilder.Entity("AndNetwork.Shared.ClanDruzhinaMember", b =>
                {
                    b.Property<int>("DruzhinaId")
                        .HasColumnType("integer");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LeaveDate")
                        .HasColumnType("date");

                    b.Property<ClanDruzhinaPositionEnum>("Position")
                        .HasColumnType("clan_druzhina_position_enum");

                    b.HasKey("DruzhinaId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("ClanDruzhinaMember");
                });

            modelBuilder.Entity("AndNetwork.Shared.ClanMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<ClanDepartmentEnum>("Department")
                        .HasColumnType("clan_department_enum");

                    b.Property<decimal>("DiscordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int?>("DruzhinaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("date");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<ClanMemberRankEnum>("Rank")
                        .HasColumnType("clan_member_rank_enum");

                    b.Property<string>("RealName")
                        .HasColumnType("text");

                    b.Property<decimal>("SteamId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<long?>("TelegramId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VkId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasAlternateKey("DiscordId");

                    b.HasAlternateKey("Nickname");

                    b.HasAlternateKey("SteamId");

                    b.HasIndex("DiscordId")
                        .IsUnique();

                    b.HasIndex("DruzhinaId");

                    b.HasIndex("Nickname")
                        .IsUnique();

                    b.ToTable("Members");
                });

            modelBuilder.Entity("AndNetwork.Shared.Elections.ClanElections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AdvisorsStartDate")
                        .HasColumnType("date");

                    b.Property<ClanElectionsStageEnum>("Stage")
                        .HasColumnType("clan_elections_stage_enum");

                    b.HasKey("Id");

                    b.ToTable("Elections");
                });

            modelBuilder.Entity("AndNetwork.Shared.Elections.ClanElectionsMember", b =>
                {
                    b.Property<int>("ElectionsId")
                        .HasColumnType("integer");

                    b.Property<ClanDepartmentEnum>("Department")
                        .HasColumnType("clan_department_enum");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<bool>("Voted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Votes")
                        .HasColumnType("integer");

                    b.HasKey("ElectionsId", "Department", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("ClanElectionsMember");
                });

            modelBuilder.Entity("AndNetwork.Shared.Elections.ClanElectionsVoting", b =>
                {
                    b.Property<int>("ElectionsId")
                        .HasColumnType("integer");

                    b.Property<ClanDepartmentEnum>("Department")
                        .HasColumnType("clan_department_enum");

                    b.Property<int>("AgainstAll")
                        .HasColumnType("integer");

                    b.HasKey("ElectionsId", "Department");

                    b.ToTable("ClanElectionsVoting");
                });

            modelBuilder.Entity("AndNetwork.Shared.Programs.ClanProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("DisbandDate")
                        .HasColumnType("date");

                    b.Property<int?>("InitiatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("Name");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("AndNetwork.Shared.Programs.ClanProgramTask", b =>
                {
                    b.Property<int>("ProgramId")
                        .HasColumnType("integer");

                    b.Property<int>("TaskNumber")
                        .HasColumnType("integer");

                    b.Property<string>("FinalDescription")
                        .HasColumnType("text");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProgramId", "TaskNumber");

                    b.ToTable("ClanProgramTask");
                });

            modelBuilder.Entity("ClanMemberClanProgram", b =>
                {
                    b.Property<int>("MembersId")
                        .HasColumnType("integer");

                    b.Property<int>("ProgramsId")
                        .HasColumnType("integer");

                    b.HasKey("MembersId", "ProgramsId");

                    b.HasIndex("ProgramsId");

                    b.ToTable("ClanMemberClanProgram");
                });

            modelBuilder.Entity("AndNetwork.Server.Discord.Channels.DiscordChannelMetadata", b =>
                {
                    b.HasOne("AndNetwork.Server.Discord.Channels.DiscordChannelCategory", "Category")
                        .WithMany("Channels")
                        .HasForeignKey("CategoryPosition");

                    b.HasOne("AndNetwork.Shared.ClanDruzhina", "Druzhina")
                        .WithMany()
                        .HasForeignKey("DruzhinaId");

                    b.HasOne("AndNetwork.Shared.Programs.ClanProgram", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId");

                    b.Navigation("Category");

                    b.Navigation("Druzhina");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("AndNetwork.Server.Discord.Channels.DiscordDepartmentPermissions", b =>
                {
                    b.HasOne("AndNetwork.Server.Discord.Channels.DiscordChannelMetadata", "Metadata")
                        .WithMany("DepartmentsPermissions")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("AndNetwork.Shared.ClanAward", b =>
                {
                    b.HasOne("AndNetwork.Shared.ClanMember", "Member")
                        .WithMany("Awards")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("AndNetwork.Shared.ClanDruzhinaMember", b =>
                {
                    b.HasOne("AndNetwork.Shared.ClanDruzhina", "Druzhina")
                        .WithMany("MembersHistory")
                        .HasForeignKey("DruzhinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNetwork.Shared.ClanMember", "Member")
                        .WithMany("AllDruzhinasMember")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Druzhina");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("AndNetwork.Shared.ClanMember", b =>
                {
                    b.HasOne("AndNetwork.Shared.ClanDruzhina", "Druzhina")
                        .WithMany("ActiveMembers")
                        .HasForeignKey("DruzhinaId");

                    b.Navigation("Druzhina");
                });

            modelBuilder.Entity("AndNetwork.Shared.Elections.ClanElectionsMember", b =>
                {
                    b.HasOne("AndNetwork.Shared.ClanMember", "Member")
                        .WithMany("VoteMember")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNetwork.Shared.Elections.ClanElectionsVoting", "Voting")
                        .WithMany("Results")
                        .HasForeignKey("ElectionsId", "Department")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Voting");
                });

            modelBuilder.Entity("AndNetwork.Shared.Elections.ClanElectionsVoting", b =>
                {
                    b.HasOne("AndNetwork.Shared.Elections.ClanElections", "Elections")
                        .WithMany("Voting")
                        .HasForeignKey("ElectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Elections");
                });

            modelBuilder.Entity("AndNetwork.Shared.Programs.ClanProgram", b =>
                {
                    b.HasOne("AndNetwork.Shared.ClanMember", "Initiator")
                        .WithMany()
                        .HasForeignKey("InitiatorId");

                    b.Navigation("Initiator");
                });

            modelBuilder.Entity("AndNetwork.Shared.Programs.ClanProgramTask", b =>
                {
                    b.HasOne("AndNetwork.Shared.Programs.ClanProgram", "Program")
                        .WithMany("Tasks")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("ClanMemberClanProgram", b =>
                {
                    b.HasOne("AndNetwork.Shared.ClanMember", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNetwork.Shared.Programs.ClanProgram", null)
                        .WithMany()
                        .HasForeignKey("ProgramsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AndNetwork.Server.Discord.Channels.DiscordChannelCategory", b =>
                {
                    b.Navigation("Channels");
                });

            modelBuilder.Entity("AndNetwork.Server.Discord.Channels.DiscordChannelMetadata", b =>
                {
                    b.Navigation("DepartmentsPermissions");
                });

            modelBuilder.Entity("AndNetwork.Shared.ClanDruzhina", b =>
                {
                    b.Navigation("ActiveMembers");

                    b.Navigation("MembersHistory");
                });

            modelBuilder.Entity("AndNetwork.Shared.ClanMember", b =>
                {
                    b.Navigation("AllDruzhinasMember");

                    b.Navigation("Awards");

                    b.Navigation("VoteMember");
                });

            modelBuilder.Entity("AndNetwork.Shared.Elections.ClanElections", b =>
                {
                    b.Navigation("Voting");
                });

            modelBuilder.Entity("AndNetwork.Shared.Elections.ClanElectionsVoting", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("AndNetwork.Shared.Programs.ClanProgram", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
